//----------------------------------------------------------------------------
//-- Template based on the measures from article:
//--	https://www.daxpatterns.com/time-patterns/
//--    https://www.sqlbi.com/articles/userelationship-in-calculated-columns/
//--    https://dash-intel.com/powerbi/modeling_date_functions.php
//--	Upated for Power BI syntax 
//--	and modified to allow for Search/replace the name of:
//--		<DATE TABLE> = Calendar
//--		<FactTable> = FactInternetSales
//-- 			<Measure> = Sales
//--		<SemiAdditiveFact>
//--			<SemiAddditiveMeasure>
//--
//--  based on 'FactInternetSales'[<BaseMeasure>]
//----------------------------------------------------------------------------
//--  Create a calculated SUM() measure over the FactTable/BaseMeasure:
//--	Sales Amount  =  SUM('FactInternetSales'[<BaseMeasure>])
//----------------------------------------------------------------------------

//  To do: Add Moving average template
//	Period to date measures
//	Update the Calendar Dimension M Script to have [Month Abbv] and change [Month] to [MonthName]


//----------------------------------------------------------------------------
// DAX Calculated columns needed in the Calendar/date dimension
// Dependent on the generic Calendar dimension M Script for Power BI
// Note: some of these can be accomplished im M as well. DAX version for reference
//----------------------------------------------------------------------------

YearMonthNumber = ('Calendar'[YearNumber] - MIN( 'Calendar'[YearNumber] )) * 12 + 'Calendar'[MonthNumber]

YearQuarterNumber = ( 'Calendar'[YearNumber] - MIN ( 'Calendar'[YearNumber] ) ) * 4 + 'Calendar'[QuarterNumber]

MonthDayNumber = 
    DAY(
        'Calendar'[Date]
    )

PM Date =
CALCULATE (
    MAX  ( 'Calendar'[Date] ),
    ALL ( 'Calendar' ),
    FILTER (
        ALL ( 'Calendar'[MonthDayNumber] ),
        'Calendar'[MonthDayNumber] <= EARLIER ( 'Calendar'[MonthDayNumber] )
            || EARLIER ( 'Calendar'[MonthDayNumber] ) = EARLIER ( 'Calendar'[MonthDays] )
    ),
    FILTER (
        ALL ( 'Calendar'[YearMonthNumber] ),
        'Calendar'[YearMonthNumber]
            = EARLIER ( 'Calendar'[YearMonthNumber] ) - 1
    )
)

PQ Date =
CALCULATE (
    MAX  ( 'Calendar'[Date] ),
    ALL ( 'Calendar' ),
    FILTER (
        ALL ( 'Calendar'[MonthDayNumber] ),
        'Calendar'[MonthDayNumber] <= EARLIER ( 'Calendar'[MonthDayNumber] )
            || EARLIER ( 'Calendar'[MonthDayNumber] ) = EARLIER ( 'Calendar'[MonthDays] )
    ),
    FILTER (
        ALL ( 'Calendar'[YearMonthNumber] ),
        'Calendar'[YearMonthNumber]
            = EARLIER ( 'Calendar'[YearMonthNumber] ) - 3
    )
)

PY Date =
CALCULATE (
    MAX  ( 'Calendar'[Date] ),
    ALL ( 'Calendar' ),
    FILTER (
        ALL ( 'Calendar'[MonthDayNumber] ),
        'Calendar'[MonthDayNumber] <= EARLIER ( 'Calendar'[MonthDayNumber] )
            || EARLIER ( 'Calendar'[MonthDayNumber] ) = EARLIER ( 'Calendar'[MonthDays] )
    ),
    FILTER (
        ALL ( 'Calendar'[YearMonthNumber] ),
        'Calendar'[YearMonthNumber]
            = EARLIER ( 'Calendar'[YearMonthNumber] ) - 12
    )
)

YearDayNumber =
COUNTROWS (
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[Date] <= EARLIER ( 'Calendar'[Date] )
            && 'Calendar'[YearNumber] = EARLIER ( 'Calendar'[YearNumber] )
    )
)

QuarterDayNumber =
COUNTROWS (
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[Date] <= EARLIER ( 'Calendar'[Date] )
            && 'Calendar'[YearNumber] = EARLIER ( 'Calendar'[YearNumber] )
            && 'Calendar'[QuarterNumber] = EARLIER ( 'Calendar'[QuarterNumber] )
    )
)





//-----------------------------------------------------------------------
//--DAX Measure templates
//-----------------------------------------------------------------------

Sales YTD = CALCULATE (
    [Sales Amount],
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[YearNumber] = MAX ( 'Calendar'[YearNumber] )
            && 'Calendar'[Date] <= MAX ( 'Calendar'[Date] )
    )
)

Sales QTD = CALCULATE (
    [Sales Amount],
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[YearQuarterNumber] = MAX ( 'Calendar'[YearQuarterNumber] )
            && 'Calendar'[Date] <= MAX ( 'Calendar'[Date] )
    )
)

Sales MTD = CALCULATE (
    [Sales Amount],
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[YearMonthNumber] = MAX ( 'Calendar'[YearMonthNumber] )
            && 'Calendar'[Date] <= MAX ( 'Calendar'[Date] )
    )
)

// Moving Annual Total
Sales MAT = CALCULATE ( 
    [Sales Amount],
    FILTER ( 
        ALL ( 'Calendar' ),
        'Calendar'[SequentialDayNumber] > MAX ( 'Calendar'[SequentialDayNumber] ) - 365
             && 'Calendar'[SequentialDayNumber] <= MAX ( 'Calendar'[SequentialDayNumber] )
    ) 
)

// Prior Period Measures
// Note: [YearMonthNumber] must be a sequntial month number, 
// better called [SequentialMonthNumber]
// Add columm to calendar: YearMonthNumber = ('Calendar'[YearNumber] - MIN( 'Calendar'[YearNumber] )) * 12 + 'Calendar'[MonthNumber]

Sales PY=
SUMX ( 
    VALUES ( 'Calendar'[YearMonthNumber] ), 
    IF ( 
        CALCULATE ( 
            COUNTROWS ( 
                VALUES ( 'Calendar'[Date] ) 
            ) 
        ) 
            = CALCULATE ( 
                VALUES ( 'Calendar'[MonthDays] ) 
            ), 
        CALCULATE ( 
            [Sales Amount], 
            ALL ( 'Calendar' ), 
            FILTER ( 
                ALL ( 'Calendar'[YearMonthNumber] ), 
                'Calendar'[YearMonthNumber] 
                    = EARLIER ( 'Calendar'[YearMonthNumber] ) - 12
            ) 
        ), 
        CALCULATE ( 
            [Sales Amount], 
            ALL ( 'Calendar' ), 
            CALCULATETABLE ( 
                VALUES ( 'Calendar'[MonthDayNumber] ) 
            ), 
            FILTER ( 
                ALL ( 'Calendar'[YearMonthNumber] ), 
                'Calendar'[YearMonthNumber] 
                    = EARLIER ( 'Calendar'[YearMonthNumber] ) - 12
            ) 
        ) 
    ) 
)
//this works
Sales PY =
CALCULATE ( SUM ( [Sales Amount] ), PREVIOUSYEAR ( 'Calendar'[Date] ) )


Sales PQ =
SUMX (
    VALUES ( 'Calendar'[YearMonthNumber] ),
    IF (
        CALCULATE (
            COUNTROWS (
                VALUES ( 'Calendar'[Date] )
            )
        )
            = CALCULATE (
                VALUES ( 'Calendar'[MonthDays] )
            ),
        CALCULATE (
            [Sales Amount],
            ALL ( 'Calendar' ),
            FILTER (
                ALL ( 'Calendar'[YearMonthNumber] ),
                'Calendar'[YearMonthNumber] 
                    = EARLIER ( 'Calendar'[YearMonthNumber] ) - 3
            )
        ),
        CALCULATE (
            [Sales Amount],
            ALL ( 'Calendar' ),
            CALCULATETABLE (
                VALUES ( 'Calendar'[MonthDayNumber] )
            ),
            FILTER (
                ALL ( 'Calendar'[YearMonthNumber] ),
                'Calendar'[YearMonthNumber] 
                    = EARLIER ( 'Calendar'[YearMonthNumber] ) - 3
            )
        )
    )
)

Sales PM = 
SUMX (
     VALUES ( 'Calendar'[YearMonthNumber] ),
    IF (
        CALCULATE (
            COUNTROWS (
                VALUES ( 'Calendar'[Date] )
            )
        )
            = CALCULATE (
                VALUES ( 'Calendar'[MonthDays] )
            ),
        CALCULATE (
            [Sales Amount],
            ALL ( 'Calendar' ),
            FILTER (
                ALL ( 'Calendar'[YearMonthNumber] ),
                'Calendar'[YearMonthNumber] 
                    = EARLIER ( 'Calendar'[YearMonthNumber] ) - 1
            )
        ),
        CALCULATE (
            [Sales Amount],
            ALL ( 'Calendar' ),
            CALCULATETABLE (
                VALUES ( 'Calendar'[MonthDayNumber] )
            ),
            FILTER (
                ALL ( 'Calendar'[YearMonthNumber] ),
                'Calendar'[YearMonthNumber] 
                    = EARLIER ( 'Calendar'[YearMonthNumber] ) - 1
            )
        )
    )
)

// Prior Period
Sales PP =
SWITCH (
    TRUE,
    ISFILTERED ( 'Calendar'[Month] ), [Sales PM],
    ISFILTERED ( 'Calendar'[Quarter] ), [Sales PQ],
    ISFILTERED ( 'Calendar'[YearNumber] ), [Sales PY],
    BLANK ()
)

Sales YOY = [Sales Amount] - [Sales PY]

Sales QOQ = [Sales Amount] - [Sales PQ]

Sales MOM = [Sales Amount] - [Sales PM]

Sales POP = [Sales Amount] - [Sales PP]

Sales YOY% =
DIVIDE ( [Sales YOY], [Sales PY] )

Sales QOQ% =
DIVIDE ( [Sales QOQ], [Sales PQ] )

Sales MOM%  =
DIVIDE ( [Sales MOM], [Sales PM] )

Sales POP% =
DIVIDE ( [Sales POP], [Sales PP] )

Sales PYTD = 
CALCULATE (
    [Sales Amount],
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[YearNumber] = MAX ( 'Calendar'[YearNumber] ) - 1
            && 'Calendar'[Date] <= MAX ( 'Calendar'[PY Date] )
    )
)



Sales PQTD = 
CALCULATE (
    [Sales Amount],
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[YearQuarterNumber] = MAX ( 'Calendar'[YearQuarterNumber] ) - 1
            && 'Calendar'[Date] <= MAX ( 'Calendar'[PQ Date] )
    )
)

Sales PMTD =
CALCULATE (
    [Sales Amount],
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[YearMonthNumber] = MAX ( 'Calendar'[YearMonthNumber] ) - 1
            && 'Calendar'[Date] <= MAX ( 'Calendar'[PM Date] )
    )
)

//Previous Year Moving Annual Total
Sales PMAT =
CALCULATE (
    [Sales Amount],
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[SequentialDayNumber] > MAX ( 'Calendar'[SequentialDayNumber] ) - 730
             && 'Calendar'[SequentialDayNumber] <= MAX ( 'Calendar'[SequentialDayNumber] ) - 365
    )
)


Sales YOYTD = [Sales YTD] - [Sales PYTD]

Sales QOQTD = [Sales QTD] - [Sales PQTD]

Sales MOMTD = [Sales MTD] - [Sales PMTD]

Sales AOA = [Sales MAT] - [Sales PMAT]



Sales YOYTD% = DIVIDE ( [Sales YOYTD], [Sales PYTD] )

Sales QOQTD% = DIVIDE ( [Sales QOQTD], [Sales PQTD] )

Sales MOMTD% = DIVIDE ( [Sales MOMTD], [Sales PMTD] )
  
Sales AOA% = DIVIDE ( [Sales AOA], [Sales PMAT] )



//----------------------------------------------------------------------
// semi-additive measures (Inventory or bank balances)
// https://www.daxpatterns.com/time-patterns/#semi-additive-measures
//----------------------------------------------------------------------

Sales Balance =
CALCULATE (
    '<SemiAdditiveFact>'[<SemiAddditiveMeasure>],
    FILTER (
        ALL ( 'Calendar'[Date] ),
        'Calendar'[Date] = MAX ( 'Calendar'[Date] )
    )
)

Sales Balance PY =
CALCULATE (
    '<SemiAdditiveFact>'[<SemiAddditiveMeasure>],
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[Date] = MAX ( 'Calendar'[PY Date] )
    )
)
 
Sales Balance PQ =
CALCULATE (
    '<SemiAdditiveFact>'[<SemiAddditiveMeasure>],
    FILTER (
        ALL ( 'Calendar' ),
        'Calendar'[Date] = MAX ( 'Calendar'[PQ Date] )
    )
)

//----------------------------------------------------------------------
// ABC Classification - static segmentation (ABC/Pareto) analysis
// https://www.daxpatterns.com/abc-classification/
//----------------------------------------------------------------------
// -- Calculated columns:
//
// [ProductSales] =
// CALCULATE ( [Sales Amount] )
 
// [ProductPercentage] =
// CALCULATE (
//     [Sales Amount],
//     ALL ( Products ),
//     Products[ProductSales] >= EARLIER ( Products[ProductSales] )
// )
//     / CALCULATE ( [Sales Amount], ALL ( Products ) )
 
// [ABC Product] =
// SWITCH (
//     TRUE (),
//     Products[ProductPercentage] <= 0.7, "A",
//     Products[ProductPercentage] <= 0.9, "B",
//     "C"
// )

//base measure
[<EntityMeasure>] =
CALCULATE ( SUM(Sales Amount) )
 
[CumulatedPercentage] =
CALCULATE (
    SUM(Sales Amount),
    ALL ( <granularity_table> ),
    <granularity_table>[<EntityMeasure>]
        >= EARLIER ( <granularity_table>[<EntityMeasure>] )
)
    / CALCULATE (  SUM(Sales Amount), ALL ( <granularity_table> ) )
 
[ABC Class] =
SWITCH (
    TRUE (),
    <granularity_table>[CumulatedPercentage] <= 0.7, "A",
    <granularity_table>[CumulatedPercentage] <= 0.9, "B",
    "C"
)


//----------------------------------------------------------------------
// ABC Classification - Dynamic segmentation (ABC/Pareto) analysis
// https://www.daxpatterns.com/abc-classification-dynamic/
//----------------------------------------------------------------------
// Requires an ABC boundary [Classifications] table
//  Base Measure:
<segmentation_measure> =
SUM ( '<fact_table>'[<value_column>] )

// You add a table () that defines classes and boundaries. You have seen an example of this table in Figure 2. This table contains three columns:

// <class>: name of the segment (usually A, B, and C).
// <lower_boundary>: the lower boundary of the segment in percent (0.7 means 70%).
// <upper_boundary>: the upper boundary of the segment in percent (0.9 means 90%).
// You create the following measures to calculate the values of the 
// boundaries for the currently selected segment:

[MinLowerBoundary] =
MIN ( <lower_boundary> )

[MaxUpperBoundary] = 
MAX ( <upper_boundary> )

<measure ABC> =
CALCULATE (
    <segmentation measure>,
    VALUES ( <business_key_column> ),
    FILTER (
        CALCULATETABLE (
            ADDCOLUMNS (
                ADDCOLUMNS (
                    VALUES ( <business_key_column> )
                    "OuterValue", <segmentation_measure>
                ),
                "CumulatedValuePercentage", DIVIDE (
                    SUMX (
                        FILTER (
                            ADDCOLUMNS (
                                VALUES ( <business_key_column> ),
                                "InnerValue", <segmentation_measure>
                            ),
                            [InnerValue] >= [OuterValue]
                        ),
                        [InnerValue]
                    ),
                    CALCULATE (
                        <segmentation_measure>, 
                        VALUES ( <business_key_column> )
                    )
                )
            ),
            ALL ( <item_table> )
        ),
        [CumulatedValuePercentage] > [MinLowerBoundary]
            && [CumulatedValuePercentage] <= [MaxUpperBoundary]
    )
)

//variation: Dynamic Classification on Page-Filter Level

Sales ABC wPageFilter =
CALCULATE (
    <classification_measure>,
    VALUES ( <business_key_column> ),
    FILTER (
        CALCULATETABLE (
            ADDCOLUMNS (
                ADDCOLUMNS (
                    VALUES ( <business_key_column> )
                    "OuterValue", <segmentation_measure>
                ),
                "CumulatedSalesPercentage", DIVIDE (
                    SUMX (
                        FILTER (
                            ADDCOLUMNS (
                                VALUES ( <business_key_column> ),
                                "InnerValue", <segmentation_measure>
                            ),
                            [InnerValue] >= [OuterValue]
                        ),
                        [InnerValue]
                    ),
                    CALCULATE (
                        <segmentation_measure>, 
                        VALUES ( <business_key_column> )
                    )
                )
            ),
            ALL ( <item_table> ),
            ALLSELECTED ( )
        ),
        [CumulatedSalesPercentage] > [MinLowerBoundary]
            && [CumulatedSalesPercentage] <= [MaxUpperBoundary]
    )
)

//variation: Dynamic Classification within Groups

Sales ABC wGroup =
CALCULATE (
    <segmentation_measure>,
    VALUES ( <business_key_column> ),
    FILTER (
        CALCULATETABLE (
            ADDCOLUMNS (
                ADDCOLUMNS (
                    VALUES ( <business_key_column> )
                    "OuterValue", <segmentation_measure>
                ),
                "CumulatedSalesPercentage", DIVIDE (
                    SUMX (
                        FILTER (
                            ADDCOLUMNS (
                                VALUES ( <business_key_column> ),
                                "InnerValue", <segmentation_measure>
                            ),
                            [InnerValue] >= [OuterValue]
                        ),
                        [InnerValue]
                    ),
                    CALCULATE (
                        <segmentation_measure>, 
                        VALUES ( <business_key_column> )
                    )
                )
            ),
            ALLEXCEPT ( <item_table>, <group_column> )
        ),
        [CumulatedSalesPercentage] > [MinLowerBoundary]
            && [CumulatedSalesPercentage] <= [MaxUpperBoundary]
    )
)

//Variation: Fix filter value, for example on high-end products

Sales ABC wFixedFilter :=
CALCULATE (
    <segmentation_measure>,
    VALUES ( <business_key_column> ),
    FILTER (
        CALCULATETABLE (
            ADDCOLUMNS (
                ADDCOLUMNS (
                    VALUES ( <business_key_column> )
                    "OuterValue", <segmentation_measure>
                ),
                "CumulatedSalesPercentage", DIVIDE (
                    SUMX (
                        FILTER (
                            ADDCOLUMNS (
                                VALUES ( <business_key_column> ),
                                "InnerValue", <segmentation_measure>
                            ),
                            [InnerValue] >= [OuterValue]
                        ),
                        [InnerValue]
                    ),
                    CALCULATE (
                        <segmentation_measure>, 
                        VALUES ( <business_key_column> )
                    )
                )
            ),
            ALL ( <item_table> ),
            <filter_column> >= <filter_value>
        ),
        [CumulatedSalesPercentage] > [MinLowerBoundary]
            && [CumulatedSalesPercentage] <= [MaxUpperBoundary]
    )
)

//----------------------------------------------------------------------
// Statistical Patterns - Moving Averages and the like
// https://www.daxpatterns.com/statistical-patterns/
//----------------------------------------------------------------------
//Note, there are improved ways to do this with newer versions of DAX

// Moving Average
// <number_of_days> is the number of days for the moving average.
// <date_column> is the date column of the date table if you have one, or the date column of the table containing values if there is no separate date table.
// Sales Amount is the measure to compute as the moving average.

Sales Moving Avg 60 Days=
AVERAGEX (
    FILTER (
        ALL ( 'Calendar'[Date] ),
        'Calendar'[Date] > ( MAX ( 'Calendar'[Date] ) - 60 )
            && 'Calendar'[Date] <= MAX ( 'Calendar'[Date] )
    ),
    [Sales Amount]
)

// Alternate for model with no standard date table

Moving Average <number_of_days> Days=
CALCULATE (
    IF (
        COUNT ( <date_column> ) >= <number_of_days>,
        SUM ( Sales[Amount] ) / COUNT ( <date_column> )
    ),
    FILTER (
        ALL ( <date_column> ),
        <date_column> > ( MAX ( <date_column> ) - <number_of_days> )
            && <date_column> <= MAX ( <date_column> )
    )
)

// Variance

// Use standard DAX functions to calculate the variance of a set of values.

// VAR.S: returns the variance of values in a column representing a sample population.
// VAR.P: returns the variance of values in a column representing the entire population.
// VARX.S: returns the variance of an expression evaluated over a table representing a sample population.
// VARX.P: returns the variance of an expression evaluated over a table representing the entire population.
 
// Standard Deviation
// You can use standard DAX functions to calculate the standard deviation of a set of values.

// STDEV.S: returns the standard deviation of values in a column representing a sample population.
// STDEV.P: returns the standard deviation of values in a column representing the entire population.
// STDEVX.S: returns the standard deviation of an expression evaluated over a table representing a sample population.
// STDEVX.P: returns the standard deviation of an expression evaluated over a table representing the entire population.

// Median - 50th percentile

Median =
(
    MINX (
        FILTER (
            VALUES ( <value_column> ),
            CALCULATE (
                COUNT ( <value_column> ),
                <value_column>
                    <= EARLIER ( <value_column> )
            )
                > COUNT ( <value_column> ) / 2
        ),
        <value_column>
    )
        + MINX (
            FILTER (
                VALUES ( <value_column> ),
                CALCULATE (
                    COUNT ( <value_column> ),
                    <value_column>
                        <= EARLIER ( <value_column> )
                )
                    > ( COUNT ( <value_column> ) - 1 ) / 2
            ),
            <value_column>
        )
) / 2


//MedianX

// <granularity_table> is the table that defines the granularity of the calculation. For example, it could be the Date table if you want to calculate the median of a measure calculated at the day level, or it could be VALUES ( ‘Date'[YearMonth] ) if you want to calculate the median of a measure calculated at the month level.
// Sales Amount is the measure to compute for each row of <granularity_table> for the median calculation.
// <measure_table> is the table containing data used by Sales Amount. For example, if the <granularity_table> is a dimension such as ‘Date’, then the <measure_table> will be ‘Internet Sales’ containing the Internet Sales Amount column summed by the Internet Total Sales measure.

MedianX =
(
    MINX (
        TOPN (
            COUNTROWS ( CALCULATETABLE ( <granularity_table>, <measure_table> ) ) / 2,
            CALCULATETABLE ( <granularity_table>, <measure_table> ),
            Sales Amount
            0
        ),
        Sales Amount
    )
        + MINX (
            TOPN (
                ( COUNTROWS ( CALCULATETABLE ( <granularity_table>, <measure_table> ) ) + 1 
                ) / 2,
                CALCULATETABLE ( <granularity_table>, <measure_table> ),
                Sales Amount,
                0
            ),
            Sales Amount
        )
) / 2


// Mode - same as MODE.SNGL Excel function
// https://www.daxpatterns.com/statistical-patterns/#mode

Mode =
MINX (
    TOPN (
        1,
        ADDCOLUMNS (
            VALUES ( 'FactInternetSales'[Sales Amount] ),
            "Frequency", CALCULATE ( COUNT ( 'FactInternetSales'[Sales Amount] ) )
        ),
        [Frequency],
        0
    ),
    'FactInternetSales'[Sales Amount]
)


//Percentile
// See https://www.daxpatterns.com/statistical-patterns/#percentile23
// Thinking there is a way to leverage DAX variables to accomplish this in a simpler way.


// Cumulative Total
// https://www.daxpatterns.com/cumulative-total/

Cumulative Sales Amount =
IF (
    MIN ( 'Calendar'[DateKey] )
        <= CALCULATE ( MAX ( ='<Transaction Table>'[DateKey] ), 
            ALL ( '<Transaction Table>' ) ),
    CALCULATE (
        SUM ( '<Transaction Table>'[Sales Amount] ),
        FILTER (
            ALL ( 'Calendar'[Date] ),
            'Calendar'[Date] <= MAX ( 'Calendar'[Date] )
        )
    )
)
 
Cumulative Sales Amount Unchecked =
CALCULATE (
    SUM ( '<Transaction Table>'[Sales Amount] ),
    FILTER (
        ALL ( 'Calendar'[Date] ),
        'Calendar'[Date] <= MAX ( 'Calendar'[Date] )
    )
)

// Distinct Count
// https://www.daxpatterns.com/distinct-count/

Unique <DimensionAttribute> =
CALCULATE (
    DISTINCTCOUNT ( '<Dimension table>'[<DimensionAttribute>] ),
    'FactInternetSales'
)


//---------------------------------------------------------------
//Moving Average
//---------------------------------------------------------------

Sales Amount (30d avg) =
AVERAGEX (
    DATESINPERIOD ( 'Calendar'[Date], LASTDATE ( 'Calendar'[Date] ), -30, DAY ),
    ),
    [Sales Amount] 
)

Sales Amount (90d avg) =
AVERAGEX (
    DATESINPERIOD ( 'Calendar'[Date], LASTDATE ( 'Calendar'[Date] ), -90, DAY ),
    ),
    [Sales Amount] 
)


//https://javierguillen.wordpress.com/2011/09/13/calculating-moving-averages-in-powerpivot-dax/
//verify lookback math

Sales 12 MMA = 
IF(COUNTROWS(VALUES('Calendar'[Month])) = 1, 
    CALCULATE( 
SUM( FactInternetSales[SalesAmount] ) /  COUNTROWS(  VALUES ( 'Calendar'[Month] ) )  , 
            DATESBETWEEN( 
                'Calendar'[FullDateKey], 
                FIRSTDATE(PARALLELPERIOD('Calendar'[FullDateKey], -11, MONTH)), 
                LASTDATE(PARALLELPERIOD('Calendar'[FullDateKey], 0, MONTH)) 
            ), ALL('Calendar') 
    ) 
)

Sales 3 MMA = 
IF(COUNTROWS(VALUES('Calendar'[Month])) = 1, 
    CALCULATE( 
SUM( FactInternetSales[SalesAmount] ) /  COUNTROWS(  VALUES ( 'Calendar'[Month] ) )  , 
            DATESBETWEEN( 
                'Calendar'[FullDateKey], 
                FIRSTDATE(PARALLELPERIOD('Calendar'[FullDateKey], -2, MONTH)), 
                LASTDATE(PARALLELPERIOD('Calendar'[FullDateKey], 0, MONTH)) 
            ), ALL('Calendar') 
    ) 
)